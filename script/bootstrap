#!/bin/bash -i
# Resolve all frontend dependencies that the application requires to develop.

# Stop on errors
set -e

cd "$(dirname "$0")/.."

# Install/upgrade node when inside devcontainer
if [[ -n "$DEVCONTAINER" ]]; then
    nodeCurrent=$(nvm version default || echo "")
    nodeLatest=$(nvm version-remote "$(cat .nvmrc)")
    echo Node Current: $nodeCurrent
    if [[ -z "$nodeCurrent" ]] | [ "$nodeCurrent" = "N/A" ]; then
        nvm install
    elif [[ "$nodeCurrent" != "$nodeLatest" ]]; then
        nvm install --reinstall-packages-from="$nodeCurrent" --default
        nvm uninstall "$nodeCurrent"
    fi
fi

if [ -d "./node_modules" ]; then
  rm -rf ./node_modules
fi

if [ -d "./homeassistant-frontend/node_modules" ]; then
  rm -rf ./homeassistant-frontend/node_modules
fi

# Initiate the Home Assistant frontend submodule
if [ ! -d "./homeassistant-frontend/src" ]; then
  cd homeassistant-frontend
  git submodule init
  git submodule update
  cd ..
fi

# Provide a base src directory if needed
if [ ! -d "./src" ]; then
  cp -r ./templates/base_config/. .
  cp -r ./templates/src  .
fi

# Install the python build tools
pip install --upgrade twine build

# Install the node packages
node ./script/merge_dependencies.cjs
yarn install